/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cellcounter;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Shape;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import org.jdesktop.swingx.JXImageView;

/**
 *
 * @author Leandro
 */
public class PrincipalFrame extends javax.swing.JFrame {

    private LinkedList<Color> backgroundColorList = new LinkedList<Color>();
    private LinkedList<Color> foregroundColorList = new LinkedList<Color>();

    /**
     * Creates new form PrincipalFrame
     */
    public PrincipalFrame() throws Exception {
        initComponents();
        File file = new File("images/unifesp/salina/2-6vm/ESTdma Marcado.png");
        imageView.setImage(file);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonPanel = new javax.swing.JPanel();
        backgroundColorButton = new javax.swing.JButton();
        backgroundColorPanel = new javax.swing.JPanel();
        foregroundColorPanel = new javax.swing.JPanel();
        foregroundColorButton = new javax.swing.JButton();
        radiusSpinner = new javax.swing.JSpinner();
        colorDistanceSlider = new javax.swing.JSlider();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        imageView = new cellcounter.CenterImageView();
        jXImageView1 = new org.jdesktop.swingx.JXImageView();
        jXImageView2 = new org.jdesktop.swingx.JXImageView();
        jXImageView3 = new org.jdesktop.swingx.JXImageView();
        jXImageView4 = new org.jdesktop.swingx.JXImageView();
        jXImageView5 = new org.jdesktop.swingx.JXImageView();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        restartMenuItem = new javax.swing.JMenuItem();
        findMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Contador de Células");
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        backgroundColorButton.setText("Fundo");
        backgroundColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundColorButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(backgroundColorButton, new java.awt.GridBagConstraints());

        backgroundColorPanel.setBackground(new java.awt.Color(255, 255, 255));
        backgroundColorPanel.setMaximumSize(new java.awt.Dimension(20, 20));
        backgroundColorPanel.setMinimumSize(new java.awt.Dimension(20, 20));
        backgroundColorPanel.setPreferredSize(new java.awt.Dimension(20, 20));

        javax.swing.GroupLayout backgroundColorPanelLayout = new javax.swing.GroupLayout(backgroundColorPanel);
        backgroundColorPanel.setLayout(backgroundColorPanelLayout);
        backgroundColorPanelLayout.setHorizontalGroup(
            backgroundColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        backgroundColorPanelLayout.setVerticalGroup(
            backgroundColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        buttonPanel.add(backgroundColorPanel, new java.awt.GridBagConstraints());

        foregroundColorPanel.setBackground(new java.awt.Color(0, 0, 0));
        foregroundColorPanel.setMaximumSize(new java.awt.Dimension(20, 20));
        foregroundColorPanel.setMinimumSize(new java.awt.Dimension(20, 20));

        javax.swing.GroupLayout foregroundColorPanelLayout = new javax.swing.GroupLayout(foregroundColorPanel);
        foregroundColorPanel.setLayout(foregroundColorPanelLayout);
        foregroundColorPanelLayout.setHorizontalGroup(
            foregroundColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        foregroundColorPanelLayout.setVerticalGroup(
            foregroundColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        buttonPanel.add(foregroundColorPanel, new java.awt.GridBagConstraints());

        foregroundColorButton.setText("Amostra");
        foregroundColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foregroundColorButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(foregroundColorButton, new java.awt.GridBagConstraints());

        radiusSpinner.setPreferredSize(new java.awt.Dimension(60, 20));
        radiusSpinner.setValue(18);
        radiusSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radiusSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        buttonPanel.add(radiusSpinner, gridBagConstraints);

        colorDistanceSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                colorDistanceSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        buttonPanel.add(colorDistanceSlider, gridBagConstraints);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.PAGE_START);

        imageView.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                imageViewPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout imageViewLayout = new javax.swing.GroupLayout(imageView);
        imageView.setLayout(imageViewLayout);
        imageViewLayout.setHorizontalGroup(
            imageViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 801, Short.MAX_VALUE)
        );
        imageViewLayout.setVerticalGroup(
            imageViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 519, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Original", imageView);

        jXImageView1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                imageViewPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jXImageView1Layout = new javax.swing.GroupLayout(jXImageView1);
        jXImageView1.setLayout(jXImageView1Layout);
        jXImageView1Layout.setHorizontalGroup(
            jXImageView1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 801, Short.MAX_VALUE)
        );
        jXImageView1Layout.setVerticalGroup(
            jXImageView1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 519, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Gray", jXImageView1);

        jXImageView2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                imageViewPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jXImageView2Layout = new javax.swing.GroupLayout(jXImageView2);
        jXImageView2.setLayout(jXImageView2Layout);
        jXImageView2Layout.setHorizontalGroup(
            jXImageView2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 801, Short.MAX_VALUE)
        );
        jXImageView2Layout.setVerticalGroup(
            jXImageView2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 519, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Edge", jXImageView2);

        jXImageView3.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                imageViewPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jXImageView3Layout = new javax.swing.GroupLayout(jXImageView3);
        jXImageView3.setLayout(jXImageView3Layout);
        jXImageView3Layout.setHorizontalGroup(
            jXImageView3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 801, Short.MAX_VALUE)
        );
        jXImageView3Layout.setVerticalGroup(
            jXImageView3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 519, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Center", jXImageView3);

        jXImageView4.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                imageViewPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jXImageView4Layout = new javax.swing.GroupLayout(jXImageView4);
        jXImageView4.setLayout(jXImageView4Layout);
        jXImageView4Layout.setHorizontalGroup(
            jXImageView4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 801, Short.MAX_VALUE)
        );
        jXImageView4Layout.setVerticalGroup(
            jXImageView4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 519, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Center", jXImageView4);

        jXImageView5.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                imageViewPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jXImageView5Layout = new javax.swing.GroupLayout(jXImageView5);
        jXImageView5.setLayout(jXImageView5Layout);
        jXImageView5Layout.setHorizontalGroup(
            jXImageView5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 801, Short.MAX_VALUE)
        );
        jXImageView5Layout.setVerticalGroup(
            jXImageView5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 519, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Center", jXImageView5);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);
        jTabbedPane1.getAccessibleContext().setAccessibleName("Center");

        fileMenu.setText("Arquivo");

        openMenuItem.setText("Abrir Imagem da Lâmina");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Editar");

        restartMenuItem.setText("Reiniciar Cores");
        restartMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(restartMenuItem);

        findMenuItem.setText("Procurar Células Semelhantes");
        findMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(findMenuItem);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-814)/2, (screenSize.height-616)/2, 814, 616);
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        try {
            JFileChooser chooser = new JFileChooser();
            FileFilter filter = new FileFilter() {
                @Override
                public boolean accept(File pathname) {
                    if (pathname.isDirectory()) {
                        return true;
                    } else {
                        String fileName = pathname.getName().toLowerCase();
                        if (fileName.endsWith("jpg")
                                || fileName.endsWith("png")
                                || fileName.endsWith("gif")
                                || fileName.endsWith("tif")) {
                            return true;
                        } else {
                            return false;
                        }
                    }
                }

                @Override
                public String getDescription() {
                    return "Arquivos de imagem JPG, PNG, GIF ou TIFF";
                }
            };
            chooser.setFileFilter(filter);
            chooser.setDialogTitle("Abrir Imagem");
            chooser.setDialogType(JFileChooser.OPEN_DIALOG);
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            chooser.setMultiSelectionEnabled(false);
            int returnVal = chooser.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = chooser.getSelectedFile();
                imageView.setImage(file);
            }
        } catch (HeadlessException ex) {
            Logger.getLogger(PrincipalFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PrincipalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openMenuItemActionPerformed
//    private TreeSet<Center> centerSet = new TreeSet<Center>();
    private Color backgroundColor;
    private Color foregroundColor;
    private double[][] image;
    private double[][] edge;
    private double[][] theta;
    private double[][] centralization;
    private double[][] picos;
    private double[][] radius;
    private double[][] output;
    private int avgD;
    private int minD;
    private int maxD;
    private int maxR;
    private int minR;
    private int maxColorDistance;

    private void findMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findMenuItemActionPerformed
        try {
            System.out.println(imageView.getCenterPoint());
            System.out.println(imageView.getInsideColor());

            backgroundColor = backgroundColorPanel.getBackground();
            foregroundColor = foregroundColorPanel.getBackground();
            maxColorDistance = (int) Math.ceil(ImageUtilities.distance(foregroundColor, backgroundColor) / 2);
            System.out.println("Maximum color distance: " + maxColorDistance);
            colorDistanceSlider.setMaximum(maxColorDistance);
            colorDistanceSlider.setValue(maxColorDistance / 2);

//            double a = ImageUtilities.distance(backgroundColor, foregroundColor);
            int maskSize = 3;
            int width = imageView.getImageWidth();
            int height = imageView.getImageHeight();
            image = new double[width][height];

            { // Imagem cinza
                for (int y = 0; y < height; y++) {
                    for (int x = 0; x < width; x++) {
                        Color mensuredColor = imageView.getPixelColor(x, y, maskSize);
                        double b = ImageUtilities.distance(mensuredColor, foregroundColor);
                        double c = ImageUtilities.distance(mensuredColor, backgroundColor);
                        double t = b + c;
                        image[x][y] = (c / t);
                    }
                }
                jXImageView1.setImage(ImageUtilities.getBufferedImage(image, 1.0d));
            }

            edge = new double[width][height];
            theta = new double[width][height];
            { // Sobel
                for (int y = 0; y < height; y++) {
                    for (int x = 0; x < width; x++) {
                        double gx = SobelUtilities.convolve(image, x, y, maskSize, false);
                        double gy = SobelUtilities.convolve(image, x, y, maskSize, true);
                        edge[x][y] = Math.sqrt(gx * gx + gy * gy);
                        if (edge[x][y] > 0.0d) {
                            theta[x][y] = Math.atan2(gx, gy);
                        }
                    }
                }
                jXImageView2.setImage(ImageUtilities.getBufferedImage(edge, 1.0d));
            }

            maxD = (int) Math.round(1.1d * imageView.getDiameter());
            maxR = (int) Math.ceil(0.6d * imageView.getDiameter());
            minR = (int) Math.floor(0.1d * imageView.getDiameter());

            int numOfAngles = (int) Math.ceil(Math.PI * imageView.getDiameter() / 3);
            numOfAngles = 8;
            LinkedList<Polygon> greenPolygonList = new LinkedList<Polygon>();
            Point center;
            while ((center = imageView.getNextGreenPixel()) != null) {
                double[] somaTotal = new double[numOfAngles];
                double[] somaPonderacao = new double[numOfAngles];
                for (int y = center.y - maxR; y < center.y + maxR; y++) {
                    for (int x = center.x - maxR; x < center.x + maxR; x++) {
                        if (x >= 0 && x < width && y >= 0 && y < height) {
                            double r = center.distance(x, y);
                            if (r > minR && r < maxR) {
                                double t = theta[x][y];
                                int i = (int) Math.round(r * Math.cos(t));
                                int j = (int) Math.round(r * Math.sin(t));
                                int k = center.x - x;
                                int l = center.y - y;
                                double a = Math.acos((i * k + j * l) / (r * r));
                                a = Math.toDegrees(a);
                                if (a < 30) {
                                    double t2 = Math.atan2(l, k);
                                    if (t2 < 0) {
                                        t2 += Math.PI;
                                    }
                                    int tInt = (int) Math.round((numOfAngles * t2) / Math.PI) % numOfAngles;
                                    somaTotal[tInt] += edge[x][y] * r;
                                    somaPonderacao[tInt] += edge[x][y];
                                }
                            }
                        }
                    }
                }
                for (int a = 0; a < numOfAngles; a++) {
                    if (somaTotal[a] > 0) {
                        somaTotal[a] /= somaPonderacao[a];
                    }
                }
                for (int a = 0; a < numOfAngles; a++) {
                    if (somaTotal[a] == 0) {
                        int b = a;
                        double d = 0;
                        do {
                            b = (b + numOfAngles - 1) % numOfAngles;
                            d = somaTotal[b];
                        } while (d == 0);
                        int c = a;
                        double e = 0;
                        do {
                            c = (c + 1) % numOfAngles;
                            e = somaTotal[c];
                        } while (e == 0);
                        somaTotal[a] = (d + e) / 2;
                    }
                }
                for (int a = 0; a < numOfAngles; a++) {
                    int a1 = (a + numOfAngles - 2) % numOfAngles;
                    int a2 = (a + numOfAngles - 1) % numOfAngles;
                    int a3 = a;
                    int a4 = (a + numOfAngles + 1) % numOfAngles;
                    int a5 = (a + numOfAngles + 2) % numOfAngles;
                    double b1 = somaTotal[a1];
                    double b2 = somaTotal[a2] * 2;
                    double b3 = somaTotal[a3] * 3;
                    double b4 = somaTotal[a4] * 2;
                    double b5 = somaTotal[a5];
                    somaTotal[a] = (b1 + b2 + b3 + b4 + b5) / 9;
                }
                
                
                Polygon polygon = new Polygon();
                for (int a = 0; a < numOfAngles; a++) {
                    double r = somaTotal[a];
                    double t = ((2 * Math.PI * a) / numOfAngles) - Math.PI;
                    int x = (int) Math.round(r * Math.cos(t)) + center.x;
                    int y = (int) Math.round(r * Math.sin(t)) + center.y;
                    polygon.addPoint(x, y);
                }
                greenPolygonList.add(polygon);
            }
            
            LinkedList<Polygon> redPolygonList = new LinkedList<Polygon>();
            while ((center = imageView.getNextRedPixel()) != null) {
                double[] somaTotal = new double[numOfAngles];
                double[] somaPonderacao = new double[numOfAngles];
                for (int y = center.y - maxR; y < center.y + maxR; y++) {
                    for (int x = center.x - maxR; x < center.x + maxR; x++) {
                        if (x >= 0 && x < width && y >= 0 && y < height) {
                            double r = center.distance(x, y);
                            if (r > minR && r < maxR) {
                                double t = theta[x][y];
                                int i = (int) Math.round(r * Math.cos(t));
                                int j = (int) Math.round(r * Math.sin(t));
                                int k = center.x - x;
                                int l = center.y - y;
                                double a = Math.acos((i * k + j * l) / (r * r));
                                a = Math.toDegrees(a);
                                if (a < 30) {
                                    double t2 = Math.atan2(l, k);
                                    if (t2 < 0) {
                                        t2 += Math.PI;
                                    }
                                    int tInt = (int) Math.round((numOfAngles * t2) / Math.PI) % numOfAngles;
                                    somaTotal[tInt] += edge[x][y] * r;
                                    somaPonderacao[tInt] += edge[x][y];
                                }
                            }
                        }
                    }
                }
                for (int a = 0; a < numOfAngles; a++) {
                    if (somaTotal[a] > 0) {
                        somaTotal[a] /= somaPonderacao[a];
                    }
                }
                for (int a = 0; a < numOfAngles; a++) {
                    if (somaTotal[a] == 0) {
                        int b = a;
                        double d = 0;
                        do {
                            b = (b + numOfAngles - 1) % numOfAngles;
                            d = somaTotal[b];
                        } while (d == 0);
                        int c = a;
                        double e = 0;
                        do {
                            c = (c + 1) % numOfAngles;
                            e = somaTotal[c];
                        } while (e == 0);
                        somaTotal[a] = (d + e) / 2;
                    }
                }
                for (int a = 0; a < numOfAngles; a++) {
                    int a1 = (a + numOfAngles - 2) % numOfAngles;
                    int a2 = (a + numOfAngles - 1) % numOfAngles;
                    int a3 = a;
                    int a4 = (a + numOfAngles + 1) % numOfAngles;
                    int a5 = (a + numOfAngles + 2) % numOfAngles;
                    double b1 = somaTotal[a1];
                    double b2 = somaTotal[a2] * 2;
                    double b3 = somaTotal[a3] * 3;
                    double b4 = somaTotal[a4] * 2;
                    double b5 = somaTotal[a5];
                    somaTotal[a] = (b1 + b2 + b3 + b4 + b5) / 9;
                }
                
                
                Polygon polygon = new Polygon();
                for (int a = 0; a < numOfAngles; a++) {
                    double r = somaTotal[a];
                    double t = ((2 * Math.PI * a) / numOfAngles) - Math.PI;
                    int x = (int) Math.round(r * Math.cos(t)) + center.x;
                    int y = (int) Math.round(r * Math.sin(t)) + center.y;
                    polygon.addPoint(x, y);
                }
                redPolygonList.add(polygon);
            }
            
            for (Polygon polygon : greenPolygonList) {
                BufferedImage image = imageView.getBufferedImage();
                Graphics2D graphics = (Graphics2D) image.getGraphics();
                Color color = new Color(0, 255, 0, 128);
                graphics.setPaint(color);
                graphics.fillPolygon(polygon);
            }
            for (Polygon polygon : redPolygonList) {
                BufferedImage image = imageView.getBufferedImage();
                Graphics2D graphics = (Graphics2D) image.getGraphics();
                Color color = new Color(255, 0, 0, 128);
                graphics.setPaint(color);
                graphics.fillPolygon(polygon);
            }



            avgD = (int) Math.round(imageView.getDiameter());
            minD = (int) Math.floor(0.9d * avgD);
            maxD = (int) Math.ceil(1.1d * avgD);
            System.out.println("Minium Diameter: " + minD);
            System.out.println("Average Diameter: " + avgD);
            System.out.println("Maximun Diameter: " + maxD);
            centralization = new double[width][height];
            radius = new double[width][height];
            
            { //  Centralização e raio
                for (int y = 0; y < height; y++) {
                    for (int x = 0; x < width; x++) {
                        for (int d = minD; d <= maxD; d++) {
                            double r = 0.5d * d;
                            double itensity = edge[x][y];
                            if (itensity > 0.0d) {
                                itensity /= (2 * Math.PI * r);
                                double thetha = theta[x][y];
                                int c1x = x + (int) Math.round(r * Math.cos(thetha));
                                int c1y = y + (int) Math.round(r * Math.sin(thetha));
                                if (c1x >= 0 && c1x < width && c1y >= 0 && c1y < height) {
                                    centralization[c1x][c1y] += itensity;
                                    radius[c1x][c1y] += r * itensity;
                                }
                            }
                        }
                    }
                }
                double maxIntensity = 0;
                for (int y = 0; y < height; y++) {
                    for (int x = 0; x < width; x++) {
                        if (centralization[x][y] != 0) {
                            centralization[x][y] *= image[x][y];
                            radius[x][y] /= centralization[x][y];
                            if (centralization[x][y] > maxIntensity) {
                                maxIntensity = centralization[x][y];
                            }
                        }
                    }
                }
                jXImageView3.setImage(ImageUtilities.getBufferedImage(centralization, 1.0d / maxIntensity));
                
                output = new double[width][height];
                double maxOutput = 0;
        
//                int rMax = (int) Math.ceil(0.25d * maxD);
                for (int y = 0; y < height; y++) {
                    for (int x = 0; x < width; x++) {
                        output[x][y] += ImageUtilities.blur(centralization, x, y, 5);
                        if (output[x][y] > maxOutput) {
                            maxOutput = output[x][y];
                        }
//                        for (int j = y - rMax; j <= y + rMax; j++) {
//                            for (int i = x - rMax; i < x + rMax; i++) {
//                                if (i >= 0 && i < width && j >= 0 && j < height) {
//                                    int ux = x - i;
//                                    int uy = y - j;
//                                    double r = Math.sqrt(ux * ux + uy * uy);
//                                    if (r < rMax) {
//                                        output[x][y] += centralization[i][j];
//                                        if (output[x][y] > maxOutput) {
//                                            maxOutput = output[x][y];
//                                        }
//                                    }
//                                }
//                            }
//                        }
                    }
                }
                
                
                jXImageView4.setImage(ImageUtilities.getBufferedImage(output, 1.0d / maxOutput));
            }
            
            picos = new double[width][height];
            { //Localizar picos
                for (int y = 0; y < height; y++) {
                    for (int x = 0; x < width; x++) {
                        double max = centralization[x][y];
                        if (max > 0.1d) {
                            max = Math.max(max, getIntensity(centralization, x-1, y-1));
                            max = Math.max(max, getIntensity(centralization, x-1, y));
                            max = Math.max(max, getIntensity(centralization, x-1, y+2));
                            max = Math.max(max, getIntensity(centralization, x, y-1));
                            max = Math.max(max, getIntensity(centralization, x, y+2));
                            max = Math.max(max, getIntensity(centralization, x+1, y-1));
                            max = Math.max(max, getIntensity(centralization, x+1, y));
                            max = Math.max(max, getIntensity(centralization, x+1, y+2));
                            if (max == centralization[x][y]) {
                                picos[x][y] = 1;
                            }
                        }
                    }
                }
                jXImageView5.setImage(ImageUtilities.getBufferedImage(picos, 1.0d));
            }
//            
//            
//            
//            
////            { // Erosão
////                ImageUtilities.erosao(image, maskSize);
////                ImageUtilities.expansao(image, maskSize);
//////                ImageUtilities.erosao(image, maskSize);
//////                ImageUtilities.expansao(image, maskSize);
////                jXImageView5.setImage(ImageUtilities.getBufferedImage(image, 1.0d));
////            }
//            
//            {// Identificação
////                TreeSet<Center> centerSet = new TreeSet<Center>();
//                refresCircles();
//                refresResult();
//            }
        } catch (Exception ex) {
            Logger.getLogger(PrincipalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_findMenuItemActionPerformed

    private double getIntensity(double[][] image, int x, int y) {
        int w = image.length;
        int h = image[0].length;
        if (x >= 0 && x < w && y >= 0 && y < h) {
            return image[x][y];
        } else {
            return 0;
        }
    }
    
//    private void refresCircles() {
//        centerSet.clear();
//        Point point;
//        int width = imageView.getImageWidth();
//        int height = imageView.getImageHeight();
//        int count = 0;
//        while ((point = ImageUtilities.getMaximunPoint(output)) != null) {
//            double avgX = 0;
//            double avgY = 0;
//            double totalI = 0;
//            int x = point.x;
//            int y = point.y;
//            int rMax = (int) Math.ceil(0.25d * maxD);
////                    int rMax = (int) Math.ceil(2.0d * radius[x][y]);
//            for (int j = y - rMax; j < y + rMax; j++) {
//                for (int i = x - rMax; i < x + rMax; i++) {
//                    if (i >= 0 && i < width && j >= 0 && j < height) {
//                        int ux = x - i;
//                        int uy = y - j;
//                        double r = Math.sqrt(ux * ux + uy * uy);
//                        if (r < rMax) {
//                            double intensity = output[i][j];
//                            avgX += i * intensity;
//                            avgY += j * intensity;
//                            totalI += intensity;
//                            output[i][j] = 0;
//                        }
//                    }
//                }
//            }
//            avgX /= totalI;
//            avgY /= totalI;
//            x = (int) Math.round(avgX);
//            y = (int) Math.round(avgY);
//            Color mensuredColor = imageView.getInsideColor(x, y, rMax);
//            double distance = 1 - ImageUtilities.distance(foregroundColor, mensuredColor) / maxColorDistance;
//            centerSet.add(new Center(avgX, avgY, distance * totalI));
//            if (++count == 1000) {
//                break;
//            }
//        }
//        System.out.println("Circles found: " + centerSet.size());
//    }
//    private void refresResult() {
//        BufferedImage imageOut = ImageUtilities.cloneImageGray(imageView.getBufferedImage());
//        Graphics2D graphics = imageOut.createGraphics();
//        int count = 0;
//        for (Center center : centerSet) {
//            int x = (int) Math.round(center.x);
//            int y = (int) Math.round(center.y);
//            if (imageOut.getRGB(x, y) != Color.YELLOW.getRGB()) {
//                double r = 0.5d * avgD;
//    //            if (r >= minD && r <= maxD) {
//                    Color mensuredColor = imageView.getInsideColor(x, y, r);
//                    if (mensuredColor != null) {
//                        double distance = ImageUtilities.distance(foregroundColor, mensuredColor);
//                        if (distance < colorDistanceSlider.getValue()) {
//                            graphics.setColor(Color.YELLOW);
//                            graphics.fillPolygon(ImageUtilities.getCircle(x, y, r));
//
//    //                        graphics.drawPolygon(ImageUtilities.getCircle(x, y, r+1));
//    //                        graphics.drawPolygon(ImageUtilities.getCircle(x, y, r-2));
//    //                        graphics.setColor(Color.YELLOW);
//    //                        graphics.drawPolygon(ImageUtilities.getCircle(x, y, r-1));
//    //                        graphics.drawPolygon(ImageUtilities.getCircle(x, y, r));
//                            count++;
//                        }
//                    }
//    //            }
//            }
//        }
//        System.out.println(count);
//        jXImageView5.setImage(imageOut);
//    }
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            imageView.moveVerticaly(1);
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            imageView.moveVerticaly(-1);
        } else if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            imageView.moveHorizontaly(1);
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            imageView.moveHorizontaly(-1);
        } else if (evt.getKeyCode() == KeyEvent.VK_PAGE_UP) {
            imageView.resizeCircle(1);
        } else if (evt.getKeyCode() == KeyEvent.VK_PAGE_DOWN) {
            imageView.resizeCircle(-1);
        }
    }//GEN-LAST:event_formKeyPressed

    private void backgroundColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundColorButtonActionPerformed
        Color mensuredColor = imageView.getInsideColor();
        backgroundColorList.add(mensuredColor);
        repaintBackgroundColor();
    }//GEN-LAST:event_backgroundColorButtonActionPerformed

    private void foregroundColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foregroundColorButtonActionPerformed
        Color mensuredColor = imageView.getInsideColor();
        foregroundColorList.add(mensuredColor);
        repaintForegroundColor();
    }//GEN-LAST:event_foregroundColorButtonActionPerformed

    private void restartMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartMenuItemActionPerformed
        foregroundColorList.clear();
        backgroundColorList.clear();
        repaintForegroundColor();
        repaintBackgroundColor();
    }//GEN-LAST:event_restartMenuItemActionPerformed
    private boolean idle = true;

    private void imageViewPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_imageViewPropertyChange
        if (idle && evt.getPropertyName().equals("imageLocation")) {
            idle = false;
            JXImageView view = (JXImageView) evt.getSource();
            Point2D imageLocation = view.getImageLocation();
            imageView.setImageLocation(imageLocation);
            jXImageView1.setImageLocation(imageLocation);
            jXImageView2.setImageLocation(imageLocation);
            jXImageView3.setImageLocation(imageLocation);
            jXImageView4.setImageLocation(imageLocation);
            jXImageView5.setImageLocation(imageLocation);
            idle = true;
        }
    }//GEN-LAST:event_imageViewPropertyChange

    private void colorDistanceSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_colorDistanceSliderStateChanged
//        refresResult();
    }//GEN-LAST:event_colorDistanceSliderStateChanged

    private void radiusSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radiusSpinnerStateChanged
        int d = (Integer) radiusSpinner.getValue();
        imageView.setCircle(d);
    }//GEN-LAST:event_radiusSpinnerStateChanged

    private void repaintForegroundColor() {
        Color averageForegroundColor = ImageUtilities.getAverageColor(foregroundColorList);
        if (averageForegroundColor == null) {
            foregroundColorPanel.setBackground(Color.BLACK);
        } else {
            foregroundColorPanel.setBackground(averageForegroundColor);
        }
    }

    private void repaintBackgroundColor() {
        Color averageBackgroundColor = ImageUtilities.getAverageColor(backgroundColorList);
        if (averageBackgroundColor == null) {
            backgroundColorPanel.setBackground(Color.WHITE);
        } else {
            backgroundColorPanel.setBackground(averageBackgroundColor);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new PrincipalFrame().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(PrincipalFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backgroundColorButton;
    private javax.swing.JPanel backgroundColorPanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JSlider colorDistanceSlider;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem findMenuItem;
    private javax.swing.JButton foregroundColorButton;
    private javax.swing.JPanel foregroundColorPanel;
    private cellcounter.CenterImageView imageView;
    private javax.swing.JTabbedPane jTabbedPane1;
    private org.jdesktop.swingx.JXImageView jXImageView1;
    private org.jdesktop.swingx.JXImageView jXImageView2;
    private org.jdesktop.swingx.JXImageView jXImageView3;
    private org.jdesktop.swingx.JXImageView jXImageView4;
    private org.jdesktop.swingx.JXImageView jXImageView5;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JSpinner radiusSpinner;
    private javax.swing.JMenuItem restartMenuItem;
    // End of variables declaration//GEN-END:variables
}
